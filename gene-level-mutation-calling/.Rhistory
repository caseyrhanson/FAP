density = c(10, 20), angle = c(-90, 45))
# Line-shaded polygons
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
density = c(10, 20), angle = c(-90, 45))
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
density = c(10, 20), angle = c(-45, 45))
# Line-shaded polygons
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
density = c(10, 20), angle = c(-45, 45))
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
density = c(10, 20,10), angle = c(-45, 45,90))
# Line-shaded polygons
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
density = c(10, 20,10), angle = c(-45, 45,90))
x <- rnorm(1000)
x
hist(x, xlim = c(-4,4))
usr <- par("usr")
clip(usr[1], -2, usr[3], usr[4])
hist(x, col = 'red', add = TRUE)
clip(2, usr[2], usr[3], usr[4])
hist(x, col = 'blue', add = TRUE)
do.call("clip", as.list(usr))  # reset to plot region
x <- rnorm(1000)
hist(x, xlim = c(-4,4))
usr <- par("usr")
clip(usr[1], -2, usr[3], usr[4])
hist(x, col = 'red', add = TRUE)
clip(2, usr[2], usr[3], usr[4])
hist(x, col = 'blue', add = TRUE)
do.call("clip", as.list(usr))  # reset to plot region
library(swirl)
swirl()
swirl()
str(mpg)
qplot(displ,hwy,mpg)
qplot(x = displ,y = hwy,data = mpg)
qplot(x = displ,y = hwy,data = mpg,aes = (col = drv))
qplot(x = displ,y = hwy,data = mpg,col = drv)
qplot(x = displ,y = hwy,data = mpg,color = drv)
qplot(x = displ,y = hwy,data = mpg,color = drv,geom = c("point","smooth"))
qplot(y = hwy,data = mpg,color = drv)
myhigh
qplot(x = drv, y = hwy, data = mpg, geom = "boxplot")
qplot(x = drv, y = hwy, data = mpg, geom = "boxplot", color = manufacturer)
exit()
quit()
library(Biostrings)
reverseComplement(index1primer)
index1primer = "CAAGCAGAAGACGGCATACGAGATCGTGATGTGACTGGAGTTCAGACGTGTGCTCTTCCGATC"
Universal = "AATGATACGGCGACCACCGAGATCT ACACTCTTTCCCTACACGACGCTCTTCCGATCT"
reverseComplement(index1primer)
index1primer = DNAString("CAAGCAGAAGACGGCATACGAGATCGTGATGTGACTGGAGTTCAGACGTGTGCTCTTCCGATC")
index1primer
Universal = DNAString("AATGATACGGCGACCACCGAGATCT ACACTCTTTCCCTACACGACGCTCTTCCGATCT")
reverseComplement(index1primer)
alphabet(reverseComplement(index1primer))
index1primer = DNAString("CAAGCAGAAGACGGCATACGAGATCGTGATGTGACTGGAGTTCAGACGTGTGCTCTTCCGATC")
Universal = DNAString("AATGATACGGCGACCACCGAGATCT ACACTCTTTCCCTACACGACGCTCTTCCGATCT")
Universal = DNAString("AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT")
length(index1primer)
length(Universal)
length(index1primer) + length(Universal)
316 - (length(index1primer) + length(Universal))
adapter3 = DNAString("ACACTCTTTCCCTACACGACGCTCTTCCGATCT")
reverseComplement(adapter3)
complement(adapter3)
adapter5 = DNAString("GATCGGAAGAGCACACGTCTGAACTCCAGTC")
reverseComplement(adapter5)
rm(list=ls())
#source("https://bioconductor.org/biocLite.R")
#biocLite("GenVisR") #already installed on Aaron's macbookpro
# Load the GenVisR package
library(dplyr);library(tidyr);library(ggplot2);library(stringr);library(reshape2);library(GGally);library(vioplot)
set.seed(426)
pt = "A001"
path = paste0("~/Bulk_A001_A002/mutect.snv.res.filtered.classified.founds.nopara.somatic.table.ccf.",pt,".txt")
data = read.table(file = path,header = T,sep = "\t",stringsAsFactors = F)
samples = str_remove(string = colnames(file)[str_detect(string = colnames(file),pattern = "ccf$")],pattern = "ccf")
#read in CCF data table
data = read.table(file = path,header = T,sep = "\t",stringsAsFactors = F)
# Create samples vector of samples from CCF Table
str_detect(string = colnames(data),pattern = "ccf$")
# Create samples vector of samples from CCF Table
ccf.index = str_detect(string = colnames(data),pattern = "ccf$")
colnames(data)[ccf.index]
samples.ccf = colnames(data)[ccf.index]
samples = str_remove(string = samples.ccf,pattern = "ccf")
samples
sample.bp = str_detect(string = samples,pattern = "bp")
sample.bp
sample.bp = str_detect(string = samples,pattern = "bp",negate = T)
sample.bp
samples = samples[sample.bp]
samples
data$somatic
max(data$somatic)
max(data$germline)
#Find Truncal mutations: Mutations with most of the samples called in somatic
apply(X = data$somatic,1, str_split(string = x, pattern = ","))
#Find Truncal mutations: Mutations with most of the samples called in somatic
apply(X = data$somatic,1, function(x) str_split(string = x, pattern = ","))
#Find Truncal mutations: Mutations with most of the samples called in somatic
apply(data$somatic,1, function(x) str_split(string = x, pattern = ","))
#Find Truncal mutations: Mutations with most of the samples called in somatic
apply(data$somatic,2, function(x) str_split(string = x, pattern = ","))
#Find Truncal mutations: Mutations with most of the samples called in somatic
sapply(data$somatic,2, function(x) str_split(string = x, pattern = ","))
#Find Truncal mutations: Mutations with most of the samples called in somatic
sapply(data$somatic,1, function(x) str_split(string = x, pattern = ","))
#Find Truncal mutations: Mutations with most of the samples called in somatic
mapply(data$somatic,1, function(x) str_split(string = x, pattern = ","))
#Find Truncal mutations: Mutations with most of the samples called in somatic
sapply(data$somatic, function(x) str_split(string = x,pattern = ",")
)
#Find Truncal mutations: Mutations with most of the samples called in somatic
sapply(data$somatic, function(x) str_split(string = x,pattern = ",")[1])
#Find Truncal mutations: Mutations with most of the samples called in somatic
sapply(data$somatic, function(x) str_split(string = x,pattern = ",")[[1]])
#Find Truncal mutations: Mutations with most of the samples called in somatic
sapply(data$somatic, function(x) str_split(string = x,pattern = ","))
#Find Truncal mutations: Mutations with most of the samples called in somatic
sapply(data$somatic, function(x) str_split(string = x,pattern = ","))[[1]]
#Find Truncal mutations: Mutations with most of the samples called in somatic
sapply(data$somatic, function(x) str_split(string = x,pattern = ","))[1]
#Find Truncal mutations: Mutations with most of the samples called in somatic
sapply(data$somatic, function(x) str_split(string = x,pattern = ","))[[1]]
sapply(data$somatic, function(x) str_split(string = x,pattern = ","))
somatic.split = sapply(data$somatic, function(x) str_split(string = x,pattern = ","))
table(somatic.split)
table(data$somatic)
max(table(data$somatic))
table(data$somatic)
#Find Truncal mutations: Mutations with most of the samples called in somatic
str_match_all(data$somatic,pattern = samples)
#Find Truncal mutations: Mutations with most of the samples called in somatic
(data$somatic %in% samples)
(samples %in% data$somatic)
#Find Truncal mutations: Mutations with most of the samples called in somatic
sum((data$somatic %in% samples))
somatic.split = sapply(data$somatic, function(x) str_split(string = x,pattern = ","))
somatic.split
for (rows in 1:nrow(data)) {
somatic.split[rows]
}
rows
somatic.split[rows]
somatic.split[rows]=!""
somatic.split[rows]!=""
somatic.split[somatic.split[rows]!=""]
somatic.split[rows][somatic.split[rows]!=""]
for (rows in 1:nrow(data)) {
somatic.split[rows][somatic.split[rows]!=""]
}
somatic.split[rows][somatic.split[rows]!=""]
somatic.split[rows]!=""
rows
somatic.split[rows]
somatic.split[rows][somatic.split[rows]!=""]
somatic.split[rows]
grepl(pattern = "",x = somatic.split[rows])
View(somatic.split)
rows = 11
somatic.split[rows][somatic.split[rows]!=""]
somatic.split[rows]
somatic.split[rows]!=""
length(somatic.split[rows])
length(somatic.split[rows][1])
length(somatic.split[rows][[1]])
somatic.split[rows][[1]]
somatic.split[rows][[1]]
somatic.split[rows][[1]]!=""
non.blank.index = somatic.split[rows][[1]]!=""
somatic.split[rows][[1]][non.blank.index]
somatic.samples = somatic.split[rows][[1]][non.blank.index]
length(somatic.samples)
data$num.of.somatic.samples = c(rep(0,nrow(data)))
data$num.of.somatic.samples
for (rows in 1:nrow(data)) {
non.blank.index = somatic.split[rows][[1]]!=""
somatic.samples = somatic.split[rows][[1]][non.blank.index]
data$num.of.somatic.samples[rows,] = length(somatic.samples)
}
for (rows in 1:nrow(data)) {
non.blank.index = somatic.split[rows][[1]]!=""
somatic.samples = somatic.split[rows][[1]][non.blank.index]
data$num.of.somatic.samples[rows] = length(somatic.samples)
}
data$num.of.somatic.samples
max(data$num.of.somatic.samples)
length(samples)
samples
data$num.of.somatic.samples >= length(samples)
sum(data$num.of.somatic.samples >= length(samples))
truncal.row.index = data$num.of.somatic.samples >= length(samples)
data[truncal.row.index,]
pt
grepl(pattern = pt, x = somatic.split[rows][[1]])
somatic.split[rows][[1]]
grepl(pattern = pt, x = somatic.samples)
non.pt.index = !grepl(pattern = pt, x = somatic.samples)
non.pt.index
rows = 11
non.blank.index = somatic.split[rows][[1]]!=""
somatic.samples = somatic.split[rows][[1]][non.blank.index]
non.pt.index = !grepl(pattern = pt, x = somatic.samples)
non.pt.index
somatic.samples[!non.pt.index]
somatic.samples = somatic.samples[!non.pt.index]
somatic.samples
for (rows in 1:nrow(data)) {
non.blank.index = somatic.split[rows][[1]]!=""
somatic.samples = somatic.split[rows][[1]][non.blank.index]
non.pt.index = !grepl(pattern = pt, x = somatic.samples)
somatic.samples = somatic.samples[!non.pt.index]
data$num.of.somatic.samples[rows] = length(somatic.samples)
}
max(data$num.of.somatic.samples)
length(samples)
truncal.row.index = data$num.of.somatic.samples >= length(samples)
truncal.row.index
data[truncal.row.index,]
truncal.data = data[truncal.row.index,]
View(truncal.data)
sample = 1
# plot CCFs for each samples Truncal mutations
sample = 1
samples
samples[sample]
paste0(samples[sample],"ccf")
truncal.data[,paste0(samples[sample],"ccf")]
plot(type = "n", xlim = c(0,2), ylim = c(0,1))
plot(1,1,type = "n", xlim = c(0,2), ylim = c(0,1))
plot(1,1,type = "n", xlim = c(0.5,1.5), ylim = c(0,1))
jitter(x = truncal.data[,paste0(samples[sample],"ccf")],amount = .5)
myjitter = jitter(x = truncal.data[,paste0(samples[sample],"ccf")],amount = .5)
truncal.ccfs = truncal.data[,paste0(samples[sample],"ccf")]
myjitter = jitter(x = truncal.ccfs,amount = .5)
points(x = myjitter,y = truncal.ccfs)
plot(1,1,type = "n", xlim = c(0.5,1.5), ylim = c(0,1),main = paste0(pt, " Truncal Mutation CCFs"))
truncal.ccfs = truncal.data[,paste0(samples[sample],"ccf")]
myjitter = jitter(x = truncal.ccfs,amount = .5)
points(x = myjitter,y = truncal.ccfs)
length(samples)
for (sample in 1:length(samples)) {
plot(1,1,type = "n", xlim = c(0.5,1.5), ylim = c(0,1),main = paste0(pt, " Truncal Mutation CCFs"))
truncal.ccfs = truncal.data[,paste0(samples[sample],"ccf")]
myjitter = jitter(x = truncal.ccfs,amount = .5)
points(x = myjitter,y = truncal.ccfs)
}
samples[sample]
for (sample in 1:length(samples)) {
plot(1,1,type = "n", xlim = c(0.5,1.5), ylim = c(0,1),main = paste0(samples[sample], " Truncal Mutation CCFs"))
truncal.ccfs = truncal.data[,paste0(samples[sample],"ccf")]
myjitter = jitter(x = truncal.ccfs,amount = .5)
points(x = myjitter,y = truncal.ccfs)
}
plot(1,1,type = "n", xlim = c(0.5,1.5), ylim = c(0,1),main = paste0(samples[sample], " Truncal Mutation CCFs"),ylab = "CCF",xlab = paste0(samples[sample]))
truncal.ccfs = truncal.data[,paste0(samples[sample],"ccf")]
myjitter = jitter(x = truncal.ccfs,amount = .5)
points(x = myjitter,y = truncal.ccfs)
points(x = myjitter,y = truncal.ccfs,pch = 21,bg = "green")
points(x = myjitter,y = truncal.ccfs,pch = 21,bg = "green",col = "black")
points(x = myjitter,y = truncal.ccfs,pch = 21,bg = "green",col = "grey")
abline(0.6)
abline(h = 0.6)
abline(h = 0.6,color = "blue")
abline(h = 0.6,col = "blue")
abline(h = 0.6,col = "blue",lty = "2")
abline(h = 0.6,col = "blue",lty = 2)
plot(1,1,type = "n", xlim = c(0.5,1.5), ylim = c(0,1),main = paste0(samples[sample], " Truncal Mutation CCFs"),ylab = "CCF",xlab = paste0(samples[sample]))
truncal.ccfs = truncal.data[,paste0(samples[sample],"ccf")]
myjitter = jitter(x = truncal.ccfs,amount = .5)
points(x = myjitter,y = truncal.ccfs,pch = 21,bg = "green",col = "grey")
abline(h = 0.6,col = "blue",lty = 2)
for (sample in 1:length(samples)) {
plot(1,1,type = "n", xlim = c(0.5,1.5), ylim = c(0,1),main = paste0(samples[sample], " Truncal Mutation CCFs"),ylab = "CCF",xlab = paste0(samples[sample]))
truncal.ccfs = truncal.data[,paste0(samples[sample],"ccf")]
myjitter = jitter(x = truncal.ccfs,amount = .5)
points(x = myjitter,y = truncal.ccfs,pch = 21,bg = "green",col = "grey")
abline(h = 0.6,col = "blue",lty = 2)
}
plot(1,1,type = "n", xlim = c(0.5,1.5), ylim = c(0,1),
main = paste0(samples[sample], " Truncal Mutation CCFs"),
ylab = "CCF",xlab = paste0(samples[sample]),xaxt = "n")
truncal.ccfs = truncal.data[,paste0(samples[sample],"ccf")]
myjitter = jitter(x = truncal.ccfs,amount = .5)
points(x = myjitter,y = truncal.ccfs,pch = 21,bg = "green",col = "grey")
abline(h = 0.6,col = "blue",lty = 2)
plot.matrix = matrix(data = 1:12,nrow = 4,ncol = 3,byrow = T)
plot.matrix
layout(mat = plot.matrix)
layout.show(12)
plot.matrix = matrix(data = 1:12,nrow = 3,ncol = 4,byrow = T)
layout(mat = plot.matrix)
layout.show(12)
for (sample in 1:length(samples)) {
plot(1,1,type = "n", xlim = c(0.5,1.5), ylim = c(0,1),
main = paste0(samples[sample], " Truncal Mutation CCFs"),
ylab = "CCF",xlab = paste0(samples[sample]),xaxt = "n")
truncal.ccfs = truncal.data[,paste0(samples[sample],"ccf")]
myjitter = jitter(x = truncal.ccfs,amount = .5)
points(x = myjitter,y = truncal.ccfs,pch = 21,bg = "green",col = "grey")
abline(h = 0.6,col = "blue",lty = 2)
}
plot.matrix = matrix(data = 1:12,nrow = 3,ncol = 4,byrow = T)
layout(mat = plot.matrix)
layout.show(12)
for (sample in 1:length(samples)) {
plot(1,1,type = "n", xlim = c(0.5,1.5), ylim = c(0,1),
main = paste0(samples[sample], " Trunk Mutation CCF"),
ylab = "CCF",xlab = paste0(samples[sample]),xaxt = "n")
truncal.ccfs = truncal.data[,paste0(samples[sample],"ccf")]
myjitter = jitter(x = truncal.ccfs,amount = .5)
points(x = myjitter,y = truncal.ccfs,pch = 21,bg = "green",col = "grey")
abline(h = 0.6,col = "blue",lty = 2)
}
plot.matrix = matrix(data = 1:12,nrow = 3,ncol = 4,byrow = T)
layout(mat = plot.matrix)
layout.show(12)
for (sample in 1:length(samples)) {
plot(1,1,type = "n", xlim = c(0.5,1.5), ylim = c(0,1),
main = paste0(samples[sample], " \n Trunk Mutation CCF"),
ylab = "CCF",xlab = paste0(samples[sample]),xaxt = "n")
truncal.ccfs = truncal.data[,paste0(samples[sample],"ccf")]
myjitter = jitter(x = truncal.ccfs,amount = .5)
points(x = myjitter,y = truncal.ccfs,pch = 21,bg = "green",col = "grey")
abline(h = 0.6,col = "blue",lty = 2)
}
??Ranges()
## make a simulated time series data set
df1 <- data.frame(time = 1:100, score = sin((1:100)/20)*10)
p1 <- qplot(data = df1, x = time, y = score, geom = "line")
df2 <- data.frame(time = 30:120, score = sin((30:120)/20)*10, value = rnorm(120-30 + 1))
p2 <- ggplot(data = df2, aes(x = time, y = score)) +
geom_line() + geom_point(size = 4, aes(color = value))
library(ggplot2)
## make a simulated time series data set
df1 <- data.frame(time = 1:100, score = sin((1:100)/20)*10)
p1 <- qplot(data = df1, x = time, y = score, geom = "line")
df2 <- data.frame(time = 30:120, score = sin((30:120)/20)*10, value = rnorm(120-30 + 1))
p2 <- ggplot(data = df2, aes(x = time, y = score)) +
geom_line() + geom_point(size = 4, aes(color = value))
## check p2
p1
## check p2
p2
## binding
tracks(p1, p2)
library(ggplot2);library(ggbio)
## make a simulated time series data set
df1 <- data.frame(time = 1:100, score = sin((1:100)/20)*10)
p1 <- qplot(data = df1, x = time, y = score, geom = "line")
df2 <- data.frame(time = 30:120, score = sin((30:120)/20)*10, value = rnorm(120-30 + 1))
p2 <- ggplot(data = df2, aes(x = time, y = score)) +
geom_line() + geom_point(size = 4, aes(color = value))
## check p2
p1
## check p2
p2
## binding
tracks(p1, p2)
## or
tks <- tracks(p1, p2)
tks
## combine
c(tks, tks)
tks + tks
cbind(tks, tks)
rbind(tks, tks) ## different wth c()!
library(grid)
x <- as(tks, "grob")
grid.draw(cbind(x, x))
## labeling: default labeling a named graphic
## simply pass a name with it
tracks(time1 = p1, time2 = p2)
## or pass a named list with it
lst <- list(time1 = p1, time2 = p2)
tracks(lst)
## more complicated case please use quotes
tracks(time1 = p1, "second time" = p2)
## set heights
tracks(time1 = p1, time2 = p2, heights = c(1, 3))
## if you want to disable label arbitrarily
## default label is always TRUE
labeled(p2)
labeled(p2) <- FALSE
## set labeled to FALSE, remove label even the plot has a name
tracks(time1 = p1, time2 = p2)
labeled(p2) <- TRUE
## fix a plot, not synchronize with other plots
p3 <- p1
## default is always FALSE
fixed(p3)
## set to TRUE
fixed(p3) <- TRUE
fixed(p3)
??Ranges()
rm(list=ls())
BiocManager::install("GenomicRanges")
BiocManager::install("drawProteins")
library(GenomicRanges);library(drawProteins)
drawProteins::get_features(proteins_acc = "APC")
drawProteins::get_features()
drawProteins::get_features(proteins_acc = "P25054")
apc = drawProteins::get_features(proteins_acc = "P25054")
drawProteins::draw_canvas(apc)
drawProteins::draw_canvas(apc)
canvas = drawProteins::draw_canvas(apc)
drawProteins::draw_chains(canvas, apc)
apc = drawProteins::get_features(proteins_acc = "P25054")
canvas = drawProteins::draw_canvas(apc)
canvas
drawProteins::draw_chains(canvas, apc)
chains = drawProteins::draw_chains(canvas, apc)
chains
View(apc)
data("five_rel_data")
five_rel_data
str(five_rel_data)
str(apc)
apc[1]
apc[[1]]
apc[[1]][1]
x = apc[1]
x$accession
x$"accession"
x[1]
head(x[1])
colnames(apc)
apc[2]
apc[3]
apc[1]
apc[1][1]
apc[1][1][1]
apc[1][1][1][1]
apc[1]
apc[[1]]
apc[[[1]]]
apc[[1]]
apc[[1]][1]
apc[[1]]$sequence
apc[[1]]$sequenceChecksum
apc[[1]]$taxid
apc[[1]]$features
apc[[1]]$features[1]
apc[[1]]$features[[1]]
apc[[1]]$features[1]
setwd("~/aarons_FAP_github_repository/gene-level-mutation-calling/")
read.table(file = "bam_selection_mutation_calling.txt",header = T,sep = "\t")
clinvar = read.table(file = "bam_selection_mutation_calling.txt",header = T,sep = "\t")
read.table(file = "A001C007_APC.sorted.ir.br.rmDup.md.bam.vcf",header = T,sep = "\t",skip = 222)
head(read.table(file = "A001C007_APC.sorted.ir.br.rmDup.md.bam.vcf",header = T,sep = "\t",skip = 221))
head(read.table(file = "A001C007_APC.sorted.ir.br.rmDup.md.bam.vcf",header = T,sep = "\t",skip = 220))
head(read.table(file = "A001C007_APC.sorted.ir.br.rmDup.md.bam.vcf",header = T,sep = "\t",skip = 219))
head(read.table(file = "A001C007_APC.sorted.ir.br.rmDup.md.bam.vcf",header = T,sep = "\t",skip = 0))
head(read.table(file = "A001C007_APC.sorted.ir.br.rmDup.md.bam.vcf",header = T,sep = "\t"))
head(read.table(file = "A001C007_APC.sorted.ir.br.rmDup.md.bam.vcf"))
tumor = read.table(file = "A001C007_APC.sorted.ir.br.rmDup.md.bam.vcf",sep = "\t")
colnames(tumor) = c("CHROM",	"POS",	"ID",	"REF",	"ALT",	"QUAL",	"FILTER",	"INFO",	"FORMAT",	"A001C007")
tumor
head(clinvar)
clinvar = read.table(file = "clinvar_result_APC.txt",header = T,sep = "\t")
head(clinvar)
clinvar$GRCh38Location
library(dplyr);library(tidyr)
clinvar$GRCh38Location
separate(clinvar,GRCh38Location,into = c("start","stop"),sep = " - ")
clinvar = separate(clinvar,GRCh38Location,into = c("start","stop"),sep = " - ")
clinvar$start %in% tumor$POS
any(clinvar$start %in% tumor$POS)
clinvar = read.table(file = "clinvar_result_APC.txt",header = T,sep = "\t")
tumor = read.table(file = "A001C007_APC.sorted.ir.br.rmDup.md.bam.vcf",sep = "\t")
colnames(tumor) = c("CHROM",	"POS",	"ID",	"REF",	"ALT",	"QUAL",	"FILTER",	"INFO",	"FORMAT",	"A001C007")
clinvar = separate(clinvar,GRCh38Location,into = c("POS","stop"),sep = " - ")
full_join(tumor,clinvar,"POS")
str(tumor)
as.numeric(as.character(tumor$POS))
tumor$POS = as.numeric(as.character(tumor$POS))
str(tumor)
str(clinvar)
as.numeric(as.character(clinvar$POS))
clinvar$POS = as.numeric(as.character(clinvar$POS))
str(clinvar)
full_join(tumor,clinvar,"POS")
left_join(tumor,clinvar,"POS")
tumor = read.table(file = "A001_blood_APC.sorted.ir.br.rmDup.md.bam.vcf",sep = "\t")
colnames(tumor) = c("CHROM",	"POS",	"ID",	"REF",	"ALT",	"QUAL",	"FILTER",	"INFO",	"FORMAT",	"A001C007")
tumor$POS = as.numeric(as.character(tumor$POS))
str(tumor)
clinvar = read.table(file = "clinvar_result_APC.txt",header = T,sep = "\t")
tumor = read.table(file = "A001_blood_APC.sorted.ir.br.rmDup.md.bam.vcf",sep = "\t")
colnames(tumor) = c("CHROM",	"POS",	"ID",	"REF",	"ALT",	"QUAL",	"FILTER",	"INFO",	"FORMAT",	"A001C007")
tumor$POS = as.numeric(as.character(tumor$POS))
str(tumor)
clinvar = separate(clinvar,GRCh38Location,into = c("POS","stop"),sep = " - ")
clinvar$POS = as.numeric(as.character(clinvar$POS))
str(clinvar)
left_join(tumor,clinvar,"POS")
protein.NM_000038 = P25054 = "MAAASYDQLLKQVEALKMENSNLRQELEDNSNHLTKLETEASNMKEVLKQLQGSIEDEAMASSGQIDLLERLKELNLDSSNFPGVKLRSKMSLRSYGSREGSVSSRSGECSPVPMGSFPRRGFVNGSRESTGYLEELEKERSLLLADLDKEEKEKDWYYAQLQNLTKRIDSLPLTENFSLQTDMTRRQLEYEARQIRVAMEEQLGTCQDMEKRAQRRIARIQQIEKDILRIRQLLQSQATEAERSSQNKHETGSHDAERQNEGQGVGEINMATSGNGQGSTTRMDHETASVLSSSSTHSAPRRLTSHLGTKVEMVYSLLSMLGTHDKDDMSRTLLAMSSSQDSCISMRQSGCLPLLIQLLHGNDKDSVLLGNSRGSKEARARASAALHNIIHSQPDDKRGRREIRVLHLLEQIRAYCETCWEWQEAHEPGMDQDKNPMPAPVEHQICPAVCVLMKLSFDEEHRHAMNELGGLQAIAELLQVDCEMYGLTNDHYSITLRRYAGMALTNLTFGDVANKATLCSMKGCMRALVAQLKSESEDLQQVIASVLRNLSWRADVNSKKTLREVGSVKALMECALEVKKESTLKSVLSALWNLSAHCTENKADICAVDGALAFLVGTLTYRSQTNTLAIIESGGGILRNVSSLIATNEDHRQILRENNCLQTLLQHLKSHSLTIVSNACGTLWNLSARNPKDQEALWDMGAVSMLKNLIHSKHKMIAMGSAAALRNLMANRPAKYKDANIMSPGSSLPSLHVRKQKALEAELDAQHLSETFDNIDNLSPKASHRSKQRHKQSLYGDYVFDTNRHDDNRSDNFNTGNMTVLSPYLNTTVLPSSSSSRGSLDSSRSEKDRSLERERGIGLGNYHPATENPGTSSKRGLQISTTAAQIAKVMEEVSAIHTSQEDRSSGSTTELHCVTDERNALRRSSAAHTHSNTYNFTKSENSNRTCSMPYAKLEYKRSSNDSLNSVSSSDGYGKRGQMKPSIESYSEDDESKFCSYGQYPADLAHKIHSANHMDDNDGELDTPINYSLKYSDEQLNSGRQSPSQNERWARPKHIIEDEIKQSEQRQSRNQSTTYPVYTESTDDKHLKFQPHFGQQECVSPYRSRGANGSETNRVGSNHGINQNVSQSLCQEDDYEDDKPTNYSERYSEEEQHEEEERPTNYSIKYNEEKRHVDQPIDYSLKYATDIPSSQKQSFSFSKSSSGQSSKTEHMSSSSENTSTPSSNAKRQNQLHPSSAQSRSGQPQKAATCKVSSINQETIQTYCVEDTPICFSRCSSLSSLSSAEDEIGCNQTTQEADSANTLQIAEIKEKIGTRSAEDPVSEVPAVSQHPRTKSSRLQGSSLSSESARHKAVEFSSGAKSPSKSGAQTPKSPPEHYVQETPLMFSRCTSVSSLDSFESRSIASSVQSEPCSGMVSGIISPSDLPDSPGQTMPPSRSKTPPPPPQTAQTKREVPKNKAPTAEKRESGPKQAAVNAAVQRVQVLPDADTLLHFATESTPDGFSCSSSLSALSLDEPFIQKDVELRIMPPVQENDNGNETESEQPKESNENQEKEAEKTIDSEKDLLDDSDDDDIEILEECIISAMPTKSSRKAKKPAQTASKLPPPVARKPSQLPVYKLLPSQNRLQPQKHVSFTPGDDMPRVYCVEGTPINFSTATSLSDLTIESPPNELAAGEGVRGGAQSGEFEKRDTIPTEGRSTDEAQGGKTSSVTIPELDDNKAEEGDILAECINSAMPKGKSHKPFRVKKIMDQVQQASASSSAPNKNQLDGKKKKPTSPVKPIPQNTEYRTRVRKNADSKNNLNAERVFSDNKDSKKQNLKNNSKVFNDKLPNNEDRVRGSFAFDSPHHYTPIEGTPYCFSRNDSLSSLDFDDDDVDLSREKAELRKAKENKESEAKVTSHTELTSNQQSANKTQAIAKQPINRGQPKPILQKQSTFPQSSKDIPDRGAATDEKLQNFAIENTPVCFSHNSSLSSLSDIDQENNNKENEPIKETEPPDSQGEPSKPQASGYAPKSFHVEDTPVCFSRNSSLSSLSIDSEDDLLQECISSAMPKKKKPSRLKGDNEKHSPRNMGGILGEDLTLDLKDIQRPDSEHGLSPDSENFDWKAIQEGANSIVSSLHQAAAAACLSRQASSDSDSILSLKSGISLGSPFHLTPDQEEKPFTSNKGPRILKPGEKSTLETKKIESESKGIKGGKKVYKSLITGKVRSNSEISGQMKQPLQANMPSISRGRTMIHIPGVRNSSSSTSPVSKKGPPLKTPASKSPSEGQTATTSPRGAKPSVKSELSPVARQTSQIGGSSKAPSRSGSRDSTPSRPAQQPLSRPIQSPGRNSISPGRNGISPPNKLSQLPRTSSPSTASTKSSGSGKMSYTSPGRQMSQQNLTKQTGLSKNASSIPRSESASKGLNQMNNGNGANKKVELSRMSSTKSSGSESDRSERPVLVRQSTFIKEAPSPTLRRKLEESASFESLSPSSRPASPTRSQAQTPVLSPSLPDMSLSTHSSVQAGGWRKLPPNLSPTIEYNDGRPAKRHDIARSHSESPSRLPINRSGTWKREHSKHSSSLPRVSTWRRTGSSSSILSASSESSEKAKSEDEKHVNSISGTKQSKENQVSAKGTWRKIKENEFSPTNSTSQTVSSGATNGAESKTLIYQMAPAVSKTEDVWVRIEDCPINNPRSGRSPTGNTPPVIDSVSEKANPNIKDSKDNQAKQNVGNGSVPMRTVGLENRLNSFIQVDAPDQKGTEIKPGQNNPVPVSETNESSIVERTPFSSSSSSKHSSPSGTVAARVTPFNYNPSPRKSSADSTSARPSQIPTPVNNNTKKRDSKTDSTESSGTQSPKRHSGSYLVTSV"
# protein.NM_000038 = P25054 = "MAAASYDQLLKQVEALKMENSNLRQELEDNSNHLTKLETEASNMKEVLKQLQGSIEDEAMASSGQIDLLERLKELNLDSSNFPGVKLRSKMSLRSYGSREGSVSSRSGECSPVPMGSFPRRGFVNGSRESTGYLEELEKERSLLLADLDKEEKEKDWYYAQLQNLTKRIDSLPLTENFSLQTDMTRRQLEYEARQIRVAMEEQLGTCQDMEKRAQRRIARIQQIEKDILRIRQLLQSQATEAERSSQNKHETGSHDAERQNEGQGVGEINMATSGNGQGSTTRMDHETASVLSSSSTHSAPRRLTSHLGTKVEMVYSLLSMLGTHDKDDMSRTLLAMSSSQDSCISMRQSGCLPLLIQLLHGNDKDSVLLGNSRGSKEARARASAALHNIIHSQPDDKRGRREIRVLHLLEQIRAYCETCWEWQEAHEPGMDQDKNPMPAPVEHQICPAVCVLMKLSFDEEHRHAMNELGGLQAIAELLQVDCEMYGLTNDHYSITLRRYAGMALTNLTFGDVANKATLCSMKGCMRALVAQLKSESEDLQQVIASVLRNLSWRADVNSKKTLREVGSVKALMECALEVKKESTLKSVLSALWNLSAHCTENKADICAVDGALAFLVGTLTYRSQTNTLAIIESGGGILRNVSSLIATNEDHRQILRENNCLQTLLQHLKSHSLTIVSNACGTLWNLSARNPKDQEALWDMGAVSMLKNLIHSKHKMIAMGSAAALRNLMANRPAKYKDANIMSPGSSLPSLHVRKQKALEAELDAQHLSETFDNIDNLSPKASHRSKQRHKQSLYGDYVFDTNRHDDNRSDNFNTGNMTVLSPYLNTTVLPSSSSSRGSLDSSRSEKDRSLERERGIGLGNYHPATENPGTSSKRGLQISTTAAQIAKVMEEVSAIHTSQEDRSSGSTTELHCVTDERNALRRSSAAHTHSNTYNFTKSENSNRTCSMPYAKLEYKRSSNDSLNSVSSSDGYGKRGQMKPSIESYSEDDESKFCSYGQYPADLAHKIHSANHMDDNDGELDTPINYSLKYSDEQLNSGRQSPSQNERWARPKHIIEDEIKQSEQRQSRNQSTTYPVYTESTDDKHLKFQPHFGQQECVSPYRSRGANGSETNRVGSNHGINQNVSQSLCQEDDYEDDKPTNYSERYSEEEQHEEEERPTNYSIKYNEEKRHVDQPIDYSLKYATDIPSSQKQSFSFSKSSSGQSSKTEHMSSSSENTSTPSSNAKRQNQLHPSSAQSRSGQPQKAATCKVSSINQETIQTYCVEDTPICFSRCSSLSSLSSAEDEIGCNQTTQEADSANTLQIAEIKEKIGTRSAEDPVSEVPAVSQHPRTKSSRLQGSSLSSESARHKAVEFSSGAKSPSKSGAQTPKSPPEHYVQETPLMFSRCTSVSSLDSFESRSIASSVQSEPCSGMVSGIISPSDLPDSPGQTMPPSRSKTPPPPPQTAQTKREVPKNKAPTAEKRESGPKQAAVNAAVQRVQVLPDADTLLHFATESTPDGFSCSSSLSALSLDEPFIQKDVELRIMPPVQENDNGNETESEQPKESNENQEKEAEKTIDSEKDLLDDSDDDDIEILEECIISAMPTKSSRKAKKPAQTASKLPPPVARKPSQLPVYKLLPSQNRLQPQKHVSFTPGDDMPRVYCVEGTPINFSTATSLSDLTIESPPNELAAGEGVRGGAQSGEFEKRDTIPTEGRSTDEAQGGKTSSVTIPELDDNKAEEGDILAECINSAMPKGKSHKPFRVKKIMDQVQQASASSSAPNKNQLDGKKKKPTSPVKPIPQNTEYRTRVRKNADSKNNLNAERVFSDNKDSKKQNLKNNSKVFNDKLPNNEDRVRGSFAFDSPHHYTPIEGTPYCFSRNDSLSSLDFDDDDVDLSREKAELRKAKENKESEAKVTSHTELTSNQQSANKTQAIAKQPINRGQPKPILQKQSTFPQSSKDIPDRGAATDEKLQNFAIENTPVCFSHNSSLSSLSDIDQENNNKENEPIKETEPPDSQGEPSKPQASGYAPKSFHVEDTPVCFSRNSSLSSLSIDSEDDLLQECISSAMPKKKKPSRLKGDNEKHSPRNMGGILGEDLTLDLKDIQRPDSEHGLSPDSENFDWKAIQEGANSIVSSLHQAAAAACLSRQASSDSDSILSLKSGISLGSPFHLTPDQEEKPFTSNKGPRILKPGEKSTLETKKIESESKGIKGGKKVYKSLITGKVRSNSEISGQMKQPLQANMPSISRGRTMIHIPGVRNSSSSTSPVSKKGPPLKTPASKSPSEGQTATTSPRGAKPSVKSELSPVARQTSQIGGSSKAPSRSGSRDSTPSRPAQQPLSRPIQSPGRNSISPGRNGISPPNKLSQLPRTSSPSTASTKSSGSGKMSYTSPGRQMSQQNLTKQTGLSKNASSIPRSESASKGLNQMNNGNGANKKVELSRMSSTKSSGSESDRSERPVLVRQSTFIKEAPSPTLRRKLEESASFESLSPSSRPASPTRSQAQTPVLSPSLPDMSLSTHSSVQAGGWRKLPPNLSPTIEYNDGRPAKRHDIARSHSESPSRLPINRSGTWKREHSKHSSSLPRVSTWRRTGSSSSILSASSESSEKAKSEDEKHVNSISGTKQSKENQVSAKGTWRKIKENEFSPTNSTSQTVSSGATNGAESKTLIYQMAPAVSKTEDVWVRIEDCPINNPRSGRSPTGNTPPVIDSVSEKANPNIKDSKDNQAKQNVGNGSVPMRTVGLENRLNSFIQVDAPDQKGTEIKPGQNNPVPVSETNESSIVERTPFSSSSSSKHSSPSGTVAARVTPFNYNPSPRKSSADSTSARPSQIPTPVNNNTKKRDSKTDSTESSGTQSPKRHSGSYLVTSV"
protein.NM_000038[1822]
nchar(protein.NM_000038)
protein.NM_000038[1822]
nchar(protein.NM_000038)[1822]
# protein.NM_000038 = P25054 = "MAAASYDQLLKQVEALKMENSNLRQELEDNSNHLTKLETEASNMKEVLKQLQGSIEDEAMASSGQIDLLERLKELNLDSSNFPGVKLRSKMSLRSYGSREGSVSSRSGECSPVPMGSFPRRGFVNGSRESTGYLEELEKERSLLLADLDKEEKEKDWYYAQLQNLTKRIDSLPLTENFSLQTDMTRRQLEYEARQIRVAMEEQLGTCQDMEKRAQRRIARIQQIEKDILRIRQLLQSQATEAERSSQNKHETGSHDAERQNEGQGVGEINMATSGNGQGSTTRMDHETASVLSSSSTHSAPRRLTSHLGTKVEMVYSLLSMLGTHDKDDMSRTLLAMSSSQDSCISMRQSGCLPLLIQLLHGNDKDSVLLGNSRGSKEARARASAALHNIIHSQPDDKRGRREIRVLHLLEQIRAYCETCWEWQEAHEPGMDQDKNPMPAPVEHQICPAVCVLMKLSFDEEHRHAMNELGGLQAIAELLQVDCEMYGLTNDHYSITLRRYAGMALTNLTFGDVANKATLCSMKGCMRALVAQLKSESEDLQQVIASVLRNLSWRADVNSKKTLREVGSVKALMECALEVKKESTLKSVLSALWNLSAHCTENKADICAVDGALAFLVGTLTYRSQTNTLAIIESGGGILRNVSSLIATNEDHRQILRENNCLQTLLQHLKSHSLTIVSNACGTLWNLSARNPKDQEALWDMGAVSMLKNLIHSKHKMIAMGSAAALRNLMANRPAKYKDANIMSPGSSLPSLHVRKQKALEAELDAQHLSETFDNIDNLSPKASHRSKQRHKQSLYGDYVFDTNRHDDNRSDNFNTGNMTVLSPYLNTTVLPSSSSSRGSLDSSRSEKDRSLERERGIGLGNYHPATENPGTSSKRGLQISTTAAQIAKVMEEVSAIHTSQEDRSSGSTTELHCVTDERNALRRSSAAHTHSNTYNFTKSENSNRTCSMPYAKLEYKRSSNDSLNSVSSSDGYGKRGQMKPSIESYSEDDESKFCSYGQYPADLAHKIHSANHMDDNDGELDTPINYSLKYSDEQLNSGRQSPSQNERWARPKHIIEDEIKQSEQRQSRNQSTTYPVYTESTDDKHLKFQPHFGQQECVSPYRSRGANGSETNRVGSNHGINQNVSQSLCQEDDYEDDKPTNYSERYSEEEQHEEEERPTNYSIKYNEEKRHVDQPIDYSLKYATDIPSSQKQSFSFSKSSSGQSSKTEHMSSSSENTSTPSSNAKRQNQLHPSSAQSRSGQPQKAATCKVSSINQETIQTYCVEDTPICFSRCSSLSSLSSAEDEIGCNQTTQEADSANTLQIAEIKEKIGTRSAEDPVSEVPAVSQHPRTKSSRLQGSSLSSESARHKAVEFSSGAKSPSKSGAQTPKSPPEHYVQETPLMFSRCTSVSSLDSFESRSIASSVQSEPCSGMVSGIISPSDLPDSPGQTMPPSRSKTPPPPPQTAQTKREVPKNKAPTAEKRESGPKQAAVNAAVQRVQVLPDADTLLHFATESTPDGFSCSSSLSALSLDEPFIQKDVELRIMPPVQENDNGNETESEQPKESNENQEKEAEKTIDSEKDLLDDSDDDDIEILEECIISAMPTKSSRKAKKPAQTASKLPPPVARKPSQLPVYKLLPSQNRLQPQKHVSFTPGDDMPRVYCVEGTPINFSTATSLSDLTIESPPNELAAGEGVRGGAQSGEFEKRDTIPTEGRSTDEAQGGKTSSVTIPELDDNKAEEGDILAECINSAMPKGKSHKPFRVKKIMDQVQQASASSSAPNKNQLDGKKKKPTSPVKPIPQNTEYRTRVRKNADSKNNLNAERVFSDNKDSKKQNLKNNSKVFNDKLPNNEDRVRGSFAFDSPHHYTPIEGTPYCFSRNDSLSSLDFDDDDVDLSREKAELRKAKENKESEAKVTSHTELTSNQQSANKTQAIAKQPINRGQPKPILQKQSTFPQSSKDIPDRGAATDEKLQNFAIENTPVCFSHNSSLSSLSDIDQENNNKENEPIKETEPPDSQGEPSKPQASGYAPKSFHVEDTPVCFSRNSSLSSLSIDSEDDLLQECISSAMPKKKKPSRLKGDNEKHSPRNMGGILGEDLTLDLKDIQRPDSEHGLSPDSENFDWKAIQEGANSIVSSLHQAAAAACLSRQASSDSDSILSLKSGISLGSPFHLTPDQEEKPFTSNKGPRILKPGEKSTLETKKIESESKGIKGGKKVYKSLITGKVRSNSEISGQMKQPLQANMPSISRGRTMIHIPGVRNSSSSTSPVSKKGPPLKTPASKSPSEGQTATTSPRGAKPSVKSELSPVARQTSQIGGSSKAPSRSGSRDSTPSRPAQQPLSRPIQSPGRNSISPGRNGISPPNKLSQLPRTSSPSTASTKSSGSGKMSYTSPGRQMSQQNLTKQTGLSKNASSIPRSESASKGLNQMNNGNGANKKVELSRMSSTKSSGSESDRSERPVLVRQSTFIKEAPSPTLRRKLEESASFESLSPSSRPASPTRSQAQTPVLSPSLPDMSLSTHSSVQAGGWRKLPPNLSPTIEYNDGRPAKRHDIARSHSESPSRLPINRSGTWKREHSKHSSSLPRVSTWRRTGSSSSILSASSESSEKAKSEDEKHVNSISGTKQSKENQVSAKGTWRKIKENEFSPTNSTSQTVSSGATNGAESKTLIYQMAPAVSKTEDVWVRIEDCPINNPRSGRSPTGNTPPVIDSVSEKANPNIKDSKDNQAKQNVGNGSVPMRTVGLENRLNSFIQVDAPDQKGTEIKPGQNNPVPVSETNESSIVERTPFSSSSSSKHSSPSGTVAARVTPFNYNPSPRKSSADSTSARPSQIPTPVNNNTKKRDSKTDSTESSGTQSPKRHSGSYLVTSV"
substr(x = protein.NM_000038,start = 1822)
# protein.NM_000038 = P25054 = "MAAASYDQLLKQVEALKMENSNLRQELEDNSNHLTKLETEASNMKEVLKQLQGSIEDEAMASSGQIDLLERLKELNLDSSNFPGVKLRSKMSLRSYGSREGSVSSRSGECSPVPMGSFPRRGFVNGSRESTGYLEELEKERSLLLADLDKEEKEKDWYYAQLQNLTKRIDSLPLTENFSLQTDMTRRQLEYEARQIRVAMEEQLGTCQDMEKRAQRRIARIQQIEKDILRIRQLLQSQATEAERSSQNKHETGSHDAERQNEGQGVGEINMATSGNGQGSTTRMDHETASVLSSSSTHSAPRRLTSHLGTKVEMVYSLLSMLGTHDKDDMSRTLLAMSSSQDSCISMRQSGCLPLLIQLLHGNDKDSVLLGNSRGSKEARARASAALHNIIHSQPDDKRGRREIRVLHLLEQIRAYCETCWEWQEAHEPGMDQDKNPMPAPVEHQICPAVCVLMKLSFDEEHRHAMNELGGLQAIAELLQVDCEMYGLTNDHYSITLRRYAGMALTNLTFGDVANKATLCSMKGCMRALVAQLKSESEDLQQVIASVLRNLSWRADVNSKKTLREVGSVKALMECALEVKKESTLKSVLSALWNLSAHCTENKADICAVDGALAFLVGTLTYRSQTNTLAIIESGGGILRNVSSLIATNEDHRQILRENNCLQTLLQHLKSHSLTIVSNACGTLWNLSARNPKDQEALWDMGAVSMLKNLIHSKHKMIAMGSAAALRNLMANRPAKYKDANIMSPGSSLPSLHVRKQKALEAELDAQHLSETFDNIDNLSPKASHRSKQRHKQSLYGDYVFDTNRHDDNRSDNFNTGNMTVLSPYLNTTVLPSSSSSRGSLDSSRSEKDRSLERERGIGLGNYHPATENPGTSSKRGLQISTTAAQIAKVMEEVSAIHTSQEDRSSGSTTELHCVTDERNALRRSSAAHTHSNTYNFTKSENSNRTCSMPYAKLEYKRSSNDSLNSVSSSDGYGKRGQMKPSIESYSEDDESKFCSYGQYPADLAHKIHSANHMDDNDGELDTPINYSLKYSDEQLNSGRQSPSQNERWARPKHIIEDEIKQSEQRQSRNQSTTYPVYTESTDDKHLKFQPHFGQQECVSPYRSRGANGSETNRVGSNHGINQNVSQSLCQEDDYEDDKPTNYSERYSEEEQHEEEERPTNYSIKYNEEKRHVDQPIDYSLKYATDIPSSQKQSFSFSKSSSGQSSKTEHMSSSSENTSTPSSNAKRQNQLHPSSAQSRSGQPQKAATCKVSSINQETIQTYCVEDTPICFSRCSSLSSLSSAEDEIGCNQTTQEADSANTLQIAEIKEKIGTRSAEDPVSEVPAVSQHPRTKSSRLQGSSLSSESARHKAVEFSSGAKSPSKSGAQTPKSPPEHYVQETPLMFSRCTSVSSLDSFESRSIASSVQSEPCSGMVSGIISPSDLPDSPGQTMPPSRSKTPPPPPQTAQTKREVPKNKAPTAEKRESGPKQAAVNAAVQRVQVLPDADTLLHFATESTPDGFSCSSSLSALSLDEPFIQKDVELRIMPPVQENDNGNETESEQPKESNENQEKEAEKTIDSEKDLLDDSDDDDIEILEECIISAMPTKSSRKAKKPAQTASKLPPPVARKPSQLPVYKLLPSQNRLQPQKHVSFTPGDDMPRVYCVEGTPINFSTATSLSDLTIESPPNELAAGEGVRGGAQSGEFEKRDTIPTEGRSTDEAQGGKTSSVTIPELDDNKAEEGDILAECINSAMPKGKSHKPFRVKKIMDQVQQASASSSAPNKNQLDGKKKKPTSPVKPIPQNTEYRTRVRKNADSKNNLNAERVFSDNKDSKKQNLKNNSKVFNDKLPNNEDRVRGSFAFDSPHHYTPIEGTPYCFSRNDSLSSLDFDDDDVDLSREKAELRKAKENKESEAKVTSHTELTSNQQSANKTQAIAKQPINRGQPKPILQKQSTFPQSSKDIPDRGAATDEKLQNFAIENTPVCFSHNSSLSSLSDIDQENNNKENEPIKETEPPDSQGEPSKPQASGYAPKSFHVEDTPVCFSRNSSLSSLSIDSEDDLLQECISSAMPKKKKPSRLKGDNEKHSPRNMGGILGEDLTLDLKDIQRPDSEHGLSPDSENFDWKAIQEGANSIVSSLHQAAAAACLSRQASSDSDSILSLKSGISLGSPFHLTPDQEEKPFTSNKGPRILKPGEKSTLETKKIESESKGIKGGKKVYKSLITGKVRSNSEISGQMKQPLQANMPSISRGRTMIHIPGVRNSSSSTSPVSKKGPPLKTPASKSPSEGQTATTSPRGAKPSVKSELSPVARQTSQIGGSSKAPSRSGSRDSTPSRPAQQPLSRPIQSPGRNSISPGRNGISPPNKLSQLPRTSSPSTASTKSSGSGKMSYTSPGRQMSQQNLTKQTGLSKNASSIPRSESASKGLNQMNNGNGANKKVELSRMSSTKSSGSESDRSERPVLVRQSTFIKEAPSPTLRRKLEESASFESLSPSSRPASPTRSQAQTPVLSPSLPDMSLSTHSSVQAGGWRKLPPNLSPTIEYNDGRPAKRHDIARSHSESPSRLPINRSGTWKREHSKHSSSLPRVSTWRRTGSSSSILSASSESSEKAKSEDEKHVNSISGTKQSKENQVSAKGTWRKIKENEFSPTNSTSQTVSSGATNGAESKTLIYQMAPAVSKTEDVWVRIEDCPINNPRSGRSPTGNTPPVIDSVSEKANPNIKDSKDNQAKQNVGNGSVPMRTVGLENRLNSFIQVDAPDQKGTEIKPGQNNPVPVSETNESSIVERTPFSSSSSSKHSSPSGTVAARVTPFNYNPSPRKSSADSTSARPSQIPTPVNNNTKKRDSKTDSTESSGTQSPKRHSGSYLVTSV"
substr(x = protein.NM_000038,start = 1822,stop = 1822)
